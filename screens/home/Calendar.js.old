import React, { useEffect, useState } from 'react';
import { 
  View,
  Text,
  FlatList,
  Button,
  TouchableOpacity,
  StyleSheet
} from 'react-native';
import moment from "moment";
import { Ionicons, AntDesign } from '@expo/vector-icons';

import { Agenda, LocaleConfig } from 'react-native-calendars';

import * as api from '../../services/auth';
import { useAuth } from '../../providers/auth';
import { ErrorText } from '../../components/Shared';

const Calendar = () => {

  const { state } = useAuth()
  const [error, setError] = useState(null)
  
  //events state hook for selected day events
  const [events, setEvents] = useState(null)
  //set selected month and year
  const [date, setDate] = useState(moment().format("MMMM YYYY"))
  //hook for setting selected date to pass to onRefresh prop of agenda to refresh the selected date contents
  const [dateToRefresh, setDateToRefresh] = useState(moment().format("YYYY-MM-DD"))

  // useEffect(() => {
  //   api.appointmentsList().then(response => {
  //     setAppointments(response.appointment.filter(result => result.idUser === state.user.idUser))
  //   }).catch( err => setError(err) )


  // }, [state.token, state.user.idUser])
  
  const getSelectedDayEvents = (date) => {

    let serviceDate = moment(date)
    serviceDate = serviceDate.format("DD/MM/YYYY")

    api.appointmentsList().then(result => {
      //setAppointments(
      //console.log(response.appointment.filter(result => result.idUser === state.user.idUser))

      if(result != "") {

        //changing the received result object so that calendar can view the event on selected date
        // let modifiedData = { [date] : result.appointment.filter(result => result.idUser === state.user.idUser) }
        let data = result.appointment.filter(result => result.idUser === state.user.idUser)
        // console.log(data)
        
        let modifiedData = { [date] : 
          [{ 
            name: data[0].appointmentMotif, 
            type: data[0].appointmentType,
            height: 50
          }] 
        } 
        console.log(modifiedData)

        setEvents(modifiedData)
        
      } else {
        let modifiedData = { [date] : result.appointment.filter(result => result.idUser === state.user.idUser) }
        setEvents(modifiedData)
      }
    }).catch( err => setError(err) )
  }

  // if(typeof props.navigation.state.params !== "undefined") {
  //   const refreshData = props.navigation.state.params.refreshData
  //   const selectedDate = props.navigation.state.params.selectedDate
  //   props.navigation.state.params = undefined
  //   let date = selectedDate.replace(/\//g, "-")
  //   date = moment(selectedDate, 'DD-MM-YYYY').format('YYYY-MM-DD')
  //   getSelectedDayEvents(date)
  // }

  useEffect( () => {
    let currentDate = moment()
    currentDate = currentDate.format('YYYY-MM-DD')
    getSelectedDayEvents(currentDate)
  }, [])
  
  LocaleConfig.locales['fr'] = {
    monthNames: ['Janvier','Février','Mars','Avril','Mai','Juin','Juillet','Août','Septembre','Octobre','Novembre','Décembre'],
    monthNamesShort: ['Janv.','Févr.','Mars','Avril','Mai','Juin','Juil.','Août','Sept.','Oct.','Nov.','Déc.'],
    dayNames: ['Dimanche','Lundi','Mardi','Mercredi','Jeudi','Vendredi','Samedi'],
    dayNamesShort: ['Dim.','Lun.','Mar.','Mer.','Jeu.','Ven.','Sam.'],
    today: 'Aujourd\'hui'
  };
  LocaleConfig.defaultLocale = 'fr'

  return(
    <View style={{
      flex: 1,
      backgroundColor: '#fff',
      paddingTop: 25
    }}>
      <ErrorText error={error} />
      {/* <Button title='test' onPress={ () => loadItems() } />
      <FlatList /> */}
      <View style = { styles.dateViewStyle }>
        <TouchableOpacity>
          <Text style = { styles.dateStyle }>{ date }</Text>
        </TouchableOpacity>
      </View>
      
      <Agenda        
        //items={ { items } }
        //renderItem={ renderItem }
        //loadItemsForMonth={ loadItems }
        //renderEmptyData={ renderEmptyData }
        //selected={"2021-07-08"}

        items={{
          '2021-07-22': [{name: 'item 1 - any js object'}],
          '2021-07-23': [{name: 'item 2 - any js object', height: 80}],
          '2021-07-24': [],
          '2021-07-25': [{name: 'item 3 - any js object'}, {name: 'any js object'}]
        }}
       

        // items={ {events} }
        scrollEnabled={ false }
        pastScrollRange = { 12 }
        futureScrollRange = { 12 }
        onCalendarToggled = {( calendarOpened ) => calendarOpened ? setDate("") : null }
        onDayPress={ (day) => {
          getSelectedDayEvents(day.dateString)
          setDate(moment(day.dateString).format('MMMM YYYY'))
          setDateToRefresh(day.dateString)
        }}
        onDayChange={ (day) => {
          console.log('day changed')
        }}
        renderItem={ (item) => {
          return(
            <View>
              <Text>{ item.name }</Text> 
            </View>
          )
        }}
        renderEmptyDate={ () => {
          return(
            <View style ={ styles.viewStyle }>
              <Ionicons name= "warning" size={30} color="#2079B3" />
              <Text style={ styles.textStyle }>No services on this date</Text>
            </View>
          )
        }}
        renderKnob={ () => {
          return(
            <TouchableOpacity>
              <Ionicons name="chevron-down" size={20} color="#2079B3" />
            </TouchableOpacity>
              
          )
        }}
        rowHasChanged={ (r1, r2) => { return r1 !== r2 } }
        onRefresh={ () => getSelectedDayEvents(dateToRefresh) }
        
        theme={{ 
          textDayFontSize: 16,
          textMonthFontSize: 20,
          textDayHeaderFontSize: 16
        }}
      />
    </View>
  )
}

const styles = StyleSheet.create({
  dateViewStyle: {
    flexDirection: 'row',
    justifyContent: 'center',
    height: 'auto'
  },
  dateStyle: {
    color: '#2079B3',
    fontSize: 18,
    padding: 10,
    margin: 5,
    borderRadius: 5
  },
  viewStyle: {
    flexDirection: 'row',
    justifyContent: 'center',
    paddingTop: 5,
    marginTop: 30,
    height: 50
  },
  textStyle: {
    fontSize: 18,
    margin: 5
  }
})

export default Calendar